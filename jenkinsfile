pipeline {
    agent any

    environment {
        // Définir les variables pour Docker Hub
        DOCKERHUB_CREDENTIALS = 'DockerHubID'
        IMAGE_NAME = 'mickael26t/monsitehtml'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Cloning Git') {
            steps {
                // Cloner le dépôt Git
                git url: 'https://github.com/mickaeltabo/DevOps.git', branch: 'master'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Construire l'image Docker
                script {
                    docker.build("${IMAGE_NAME}")
                }
            }
        }
        
        stage('Push Image to Docker Hub') {
            steps {
                // Se connecter à Docker Hub
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        // Pousser l'image sur Docker Hub
                        docker.image("${IMAGE_NAME}").push()
                    }
                }
            }
        }
        stage('Security Scan with Trivy') {
            steps {
                script {
                    // build the latest Docker image
                    sh "docker build -t mickael26t/monsitehtml:latest ."

                    // Run Trivy to scan the Docker image for vulnerabilities
                    sh "trivy image mickael26t/monsitehtml:latest"
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonar-Server') {
                    script {
                        def scannerHome = tool 'SonarScanner';
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=crypto \
                            -Dsonar.sources=."
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                script {
                    def ec2Instance = [
                        name: 'Projet2',
                        host: '13.37.220.156',
                        user: 'ubuntu',
                        credentialsId: 'SSH-KEY' // ID of SSH credentials
                    ]

                    // Execute commands on the EC2 instance
                    sshagent(credentials: ['SSH-KEY']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no ubuntu@13.37.220.156 'sudo docker run -d mickael26t/monsitehtml:latest'
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
